1.什么是DOM
	1)DOM —— > Document Object Model

	2)DOM定义了表示和修改文档所需要的方法。DOM对象即为宿主对象，由浏览器厂商定义，用来操作html和xml功能的一类对象的集合。也有人称DOM是对html以及xml的标准编程接口。
	DOM不能直接操作CSS样式表

2.DOM基本操作
	1)节点的属性
		nodeName:元素的标签名，以大写形式表示，只读
		nodeValue:Text节点或Comment节点的文本内容可读写
		nodeType:该节点的类型，只读
		attributes:Element节点的属性集合

	2)节点类型(nodetype)
		元素节点：1
		属性节点：2
		文本节点：3
		注释节点：8
		document：9
		DocumentFragment：11

	3)节点的一个方法：Node.hasChildNodes();

	4)对节点的增删改查
		查
			查看元素节点
				document代表整个文档

				document.getElementById();//元素id在ie8以下的浏览器不区分大小写，而且也返回匹配name属性的元素

				document.getElementsByTagName();//标签名

				document.getElementsByName();//注意，只有部分标签name可生效（表单，表单元素，img，iframe）

				document.getElementsByClassName;//类名，ie8及以下没有，可以多个class一起

				document.querySelector();//css选择器，ie7及以下版本没有，选定的节点不是实时的，不能动态更新，类比照相

				document.querySelectorAll();//css选择器，ie7及以下版本没有，选定的节点不是实时的，不能动态更新

			遍历节点树
				parentNode ——>父节点（最顶端的parentNode为#document）;
				childNodes ——>子节点们
				firstChild ——>第一个子节点
				lastChild ——>最后一个字节
				nextSibling ——>后一个兄弟节点
				previousSibling ——>前一个兄弟节点

			遍历元素节点树
				parentElement ——>返回当前元素的父元素节点（ie9以下不兼容）
				children ——>只返回当前元素的元素子节点
				node.childElementCount === node.children.length ——>当前元素节点的子节点个数（ie9以下不兼容）
				firstElementChild ——>返回的是第一个元素节点（ie9以下不兼容）
				lastElementChild ——>返回的是最后一个元素节点（ie9以下不兼容）
				nextElementSibling ——>返回的是后一个兄弟元素节点（ie9以下不兼容）
				previousElementSibling ——>返回的是前一个兄弟元素节点（ie9以下不兼容）
		增
			document.createElement();
			document.createTextNode();
			document.createComment();
			document.createDocumentFragment();
		插
			parentNode.appendChild();把页面已有的节点插入到另外的节点里面会进行剪切操作
			parentNode.insertBofore(a,b);
		删
			parentNode.removeChild();从页面剪切出去
			child.remove();从页面里销毁
		替换
			parentNode.replaceChild(new,origin);
 
3.Element节点的一些属性
	innerHTML
	innerText(火狐不兼容)textContent(老版本ie不好使)

4.Element节点的一些方法
	ele.setAttribute();
	ele.getAttribute();

5.日期对象(Date)
	封装函数，打印当前是何年何月何日何时何分何秒
	var date = new Date();
	get:
	date.getDate();
	date.getDay(); 
	date.getMonth();
	date.getFullYear;
	date.getHours();
	date.getMinutes();
	date.getSeconds();//不是实时的秒数
	date.getMiliseconds();
	date.getTime();//最常用和最有用的，作为一个时间戳，求时间差
	set:
	date.setDate();
	...
	date.setTime();

6.js定时器	
	定时循环
	setInterval(function () {
		执行语句
	},设定时间间隔(只能设定一次，后续无法作为参数进行更改))
	每一个setInterval()会返回一个唯一标识。

	定时执行
	setTimeout(function () {},time)
	每一个setTimeout()也会返回一个唯一标识。

	clearInterval();

	clearTimeout();

	全局对象window上的方法，内部函数this指向window
	注意：setInterval('func(){}',1000)

	练习：计时器，到3分钟停止。

7.获取窗口属性
	1)查看滚动条的滚动距离
		window.pageXOffset/pageYOffset
		ie8及以下不兼容

	2)document.body/documentElement.scrollLeft/scrollTop
		兼容性比较混乱，用时取两个值相加，因为不可能存在两个同时有值

		封装兼容性方法，求滚动条滚动距离(getScrollOffset)
			function getScrollOffset() {
				if(window.pageXOffset) {
					return {
						x:window.pageXOffset,
						y:window.pageyoffset
					}
				}else {
					return {
						x:document.body.scrollLeft + document.documentElement.scrollLeft,
						y:document.body.scrollTop + document.documentElement.scrollTop
					}
				}
			}

	3)查看视口的尺寸(比较有用)
		window.innerWidth/innerHeight
		ie8及以下不兼容
		document.documentElement.clientWidth/clientHeight
		标准模式下，任意浏览器兼容
		document.body.clientWidth/clientHeight
		适用于怪异模式（未声明文档类型）下的浏览器

		封装兼容性方法，返回浏览器视口尺寸getViewportOffset();
			function getViewportOffset() {
			if(window.innerWidth) {
				return {
					w: window.innerWidth,
					h: window.innerHeight
				}
			}else {
				if(document.compatMode === 'BackCompat') {
					return {
						w: document.body.clientWidth,
						h: document.body.clientHeight
					}
				}else {
					return {
						w: document.documentElement.clientWidth,
						h: document.documentElement.clientHeight
					}
				}
			}
			}

	4)查看元素的几何尺寸
		domEle.getBoundingClientRect();
		兼容性很好
		该方法返回一个对象，对象里面有left,top,right,bottom等属性，left和top代表该元素左上角的X和Y坐标，right和bottom代表元素右下角的X和Y坐标
		height和width属性老版本ie并未实现
		返回的结果并不是实时的

	5)查看元素的尺寸（视觉上的尺寸，包括padding，border）
		dom.offsetWidth,dom.offsetHeight

	6)查看元素的位置
		dom.offsetLeft,dom.offsetTop
		对于无定位父级的元素，返回相对文档的坐标。对于有定位父级的元素，返回相对于最近的有定位的父级的坐标。
		dom.offsetParent
		返回最近的有定位的父级，如无，返回body,body.offsetParent返回的是null。

		eg:求元素相对于文档的坐标getElementPosition();

	7)让滚动条滚动
		window上有三个方法
			scroll(x,y),scrollTo(x,y)：滚动到(x,y)坐标
			scrollBy(x,y)：在之前的数据基础上滚动累加。
			三个方法功能类似，用法都是将x，y坐标传入。即实现让滚动条滚动到当前位置。

		eg:利用scrollBy()快速阅读功能

8.脚本化CSS
	1)读写元素css属性
		dom.style.prop
			只可读写行间样式，没有兼容性问题，碰到float这样的保留字属性，前面应加css
		eg；float ——>cssFloat
		复合属性必须拆解，组合单词变成小驼峰式写法
		写入的值必须是字符串格式

	2)查询计算样式
		window.getComputedStyle(ele,null);该元素的一切显示出来的css样式，包括默认值
		第二个参数是查找伪元素css的，null——>'after'/'before'
		计算样式只读
		返回的计算样式的值都是绝对值，没有相对单位
		ie8及以下不兼容

	3)ie8及以下查询样式
		ele.currentStyle
		计算样式只读
		返回的计算样式的值不是经过转换的绝对值
		ie独有的属性

		封装兼容性方法getStyle(elem,prop);
			function getStyle(elem,prop) {
				if(window.getComputedStyle) {
					return window.getComputedStyle(elem,null)[prop];
				}else {
					return elem.currentStyle[prop];
				}
			}
		事先设置好样式，通过改变css选择器来更改样式，提高效率

	练习：让小方块运动

9.事件
	1.何为事件？
		交互体验的核心功能

	2.如何绑定事件？
		1)elem.onxxx = function (event) {}
			兼容性很好，但是一个元素的同一个事件上只能绑定一个处理函数
			基本等同于写在HTML行间上
			eg：div.onclick = function () {}

		2)obj.addEventListener(事件类型(type)，处理函数(fn)，false)
			IE 9 以下不兼容,可以为一个事件绑定多个处理程序
			eg；div.addEventListener('click',function() {console.log('a')},false);
					div.addEventListener('click',function() {console.log('a')},false);
					以上执行两次，即在控制台按顺序输出两个a，处理函数虽然视觉上一样，但是不是同一个函数

					div.addEventListener('click',test,false);
					div.addEventListener('click',test,false);
					function test(){console.log('a')};
					以上执行一次，即在控制台输出一个a,因为引用地址相同

		3)obj.attachEvent('on' + 事件类型type,处理函数fn)
			IE独有(IE 11不支持attachEvent,替代功能为addEventListener)，一个事件同样可以绑定多个处理程序
			eg：div.attachEvent('onclick',function() {console.log('a')});
					div.attachEvent('onclick',function() {console.log('a')});
					以上执行两次，即在控制台按顺序输出两个a，处理函数虽然视觉上一样，但是不是同一个函数

					div.attachEvent('onclick',test,false);
					div.attachEvent('onclick',test,false);
					function test(){console.log('a')};
					IE 9及以上执行一次，即在控制台输出一个a,因为引用地址相同

					div.attachEvent('onclick',test,false);
					div.attachEvent('onclick',test,false);
					function test(){console.log('a')};
					IE 8及以下执行两次，即在控制台输出两个a.
			练习见event1

	3.事件处理程序的运行环境
		1)elem.onxxx = function (event) {}
			程序中的this指向dom元素本身

		2)obj.addEventListener(type,fn,false)
			程序中的this指向dom元素本身

		3)obj.attachEvent('on' + type,fn)
			程序中的this指向window,利用call方法改变this指向

		练习:封装兼容性的事件处理方法 见tool.js

	4.解除事件处理程序
		1)elem.onxxx = function (event) {}
			——>elem.onxxx = false/''/null
			——>elem.onxxx = function (event) {xxx;this.onxxx = false/''/null} 只执行一次就解除
		2)obj.addEventListener(type,fn,false)
			——>obj.removeEventListener(type,fn,false)
		3)obj.attachEvent('on' + type,fn)
			——>obj.detachEvent('on' + type,fn)

		Warning:若绑定匿名函数，则无法解除

	5.事件处理模型——事件冒泡、捕获
		1)事件冒泡
			结构上（非视觉上）嵌套关系的元素，会存在事件冒泡的功能，即同一事件，自子元素冒泡向父元素。（自底向上）【冒泡阶段，事件将从目标元素向上传播回或冒泡回 Document 对象的文档层次】
			eg: <div>
					<div>
						<div></div>
					</div>
					</div>

		2)事件捕获
			结构上（非视觉上）嵌套关系的元素，会存在事件捕获的功能，即同一事件，自父元素捕获至子元素（事件源元素）。（自顶向下）【捕获阶段，事件从 Document 对象沿着文档树向下传递给目标节点】

			Warning: IE没有捕获事件

		3)同一个对象的同一个事件类型，绑定同一个事件处理函数（引用地址相同），分别绑定不同的处理模型：冒泡(false)或捕获(true)，目标函数按顺序同时执行（可以近似认为几乎同时发生）？？？

		4)同一个对象的同一个事件类型，绑定两个事件处理函数，同时分别绑定一个事件处理模型，触发顺序是：先捕获——>目标函数按顺序执行——>后冒泡

	6.focus, blur, change, submit, reset, select 等事件不冒泡
		不是所有事件都能冒泡.
		所有事件都有捕获？？？

	7.取消冒泡和阻止默认事件
		1)取消冒泡
			W3C标准：event.stopPropagation();但不支持IE9以下版本
			IE独有(chrome也有)：event.cancelBubble = true;默认为false
			封装取消冒泡函数方法 stopBubble(event)

		2)阻止默认事件
			默认事件——>表单提交，a标签跳转(<a href ="javascript: void(0)></a>"，右键菜单等

			a.return false: 以对象属性的方式注册的事件才生效,即elem.onxxx = function (){return false}
			b.event.preventDefault(): W3C标准，IE9以下不兼容
			c.event.returnValue = false: 兼容IE

			封装阻止默认事件的函数 cancelHandler(event);

	8.事件对象
	 【事件对象e，非ie浏览器自有的】document.onclick = function(e) {console.log(e)};
		1)elem.onxxx = function(e) {
			var event = e || window.event; //事件对象
			var target = event.target || event.srcElement; //事件源对象
			console.log(event);
			}

		2)事件源对象
			event.target 火狐只有这个
			event.srcElement ie只有这个
			以上两个chrome都有

		3)兼容性写法

	9.事件委托
		利用冒泡事件和事件源对象进行处理
		优点：
			1）性能 不需要循环所有元素一个个绑定事件
			2）灵活 当有新的子元素时不需要重新绑定
    	练习见事件委托.html

  10.事件分类
  	1)鼠标事件
  		click mousedown mousemove mouseup contextmenu(右键菜单事件) mouseover mouseout mouseenter mouseleave
  		click = mousedown + mouseup
  		拓展：移动端的touchstart，touchmove，touchend

  	2)用button来区分鼠标的按键，0/1/2
    		eg: document.onmousedown = function (e) {
		    			if(e.button == 0) {
		    				console.log('鼠标左键');
		    			}else if(e.button == 2) {
		    				console.log('鼠标右键');
		    			}else if(e.button == 1) {
		    				console.log('鼠标中键');
		    			}
		    		}

  	3)DOM3标准规定：click事件只能监听左键，只能通过mousedown 和 mouseup来判断鼠标键

    	如何解决mousedown和click的冲突？
    		eg: 
    		var firstTime = 0;
    		var	lastTime = 0;
    		var	key =false;
    		document.onmousedown = function() {
    			firstTime = new Date().getTime();
    		}
    		document.onmouseup = function() {
    			lastTime = new Date().getTime();
    			if(lastTime - firstTime < 300) {
    				key = true;
    			}
    		}
    		document.onclick = function() {
    			if(key) {
    				console.log('click');
    				key = false;
    			}
    		}
  	
  	4)键盘事件
  		keydown 监测键盘所有按键，除了辅助键fn
  		keyup 
  		keypress 监测键盘所有字符类按键

  		keydown > keypress > keyup ——> keypress != keydown + keyup

  		keydown和keypress的区别
  			keydown 可以响应任意键盘按键;
  			keypress 只可以响应字符类键盘按键，返回ASCII码，可以转换成相应字符
  			eg: document.onkeypress = function(e) {
		  				console.log(String.fromCharCode(e.charCode));
		  			}

  	5)文本操作事件
  		input,focus,blur,change
  		eg: elem.oninput/onchange = function() {
		  			console.log(this.value)
		  		}

  	6)窗体操作类（window上的事件）
  		window.scroll
  		window.load（慢，效率低）等到domtree和csstree异步加载完成形成rendertree时才开始执行里面的程序.

  		练习：fixed定位js兼容版，ie6没有fixed定位，利用window.scroll模拟fixed定位

10.json
	JSON是一种传输数据的格式（以对象为样板，本质上就是对象，但用途有区别，对象就是本地用的，json是用来传输的）

	JSON.parse(); string ——> json

	JSON.stringify(); json ——> string

11.异步加载
	1)浏览器渲染过程
							Randertree
		DOMtree(dom节点解析)	+	CSStree
		深度优先				深度优先
		reflow重排:降低效率
		dom节点删除，添加，宽高变化，位置变化，display改变
		repaint重绘:局部改变

	2)异步加载js
		js加载的缺点：加载工具方法没必要阻塞文档，过多js加载会影响页面效率，一旦网速不好，那么整个网站将等待js加载而不进行后续渲染等工作。
		有些工具方法需要按需加载，用到再加载，不用不加载。

	3)javascript异步加载的三种方案
		<script type = 'type/javascript' src = '#' defer = 'defer'></script>
		defer异步加载，但要等到dom文档全部解析完(domtree标签解析完)才会被执行。只有ie能用，也可以将代码写到内部。

		<script type = 'type/javascript' src = '#' async = 'async'></script>
		async异步加载，加载完成就执行，async只能加载外部脚本，不能被js写在script标签里。
		以上两种方法执行时也不阻塞页面

		创建script标签，插入到dom中，加载完毕后callback.
		<script type = 'type/javascript'>
			var script = document.createElement('script');
			script.type = 'type/javascript';
			script.src = '#';
			script.onload = function () {
				执行语句
			}
			script.readyState = 'loading/loaded';//ie专用
			script.onreadyStatechange = function () {
				if(script.readyState == 'comlete' || script.readyState == 'loaded') {
					执行语句
				}
			}
			document.head.appendChild(script);
		</script>
		异步加载兼容方法：
		function loadScript(url,callback) {
			var script = document.createElement('script');
			script.type = 'type/javascript';
			if(script.readyState) {
				script.onreadyStatechange = function () {//ie
					if(script.readyState == 'comlete' || script.readyState == 'loaded') {
						callback();/obj[callback]();与引入的js文件配合
					}
				}
			}else {
				script.onload = function () {//safari chrome firefox opea
				callback();/obj[callback]();
				}
			}
			script.src = url;
			document.head.appendChild(script);
		}
		loadScript(url,function() {callback();});

12.js加载时间线
	1)创建Document对象，开始解析web页面。解析HTML元素和他们的文本内容后添加Element对象和Text节点到文档中。这个阶段document.readyState = 'loading'。

	2)遇到link外部css，创建线程加载，并继续解析文档。

	3)遇到script外部js，并且没有设置async、defer，浏览器加载，并阻塞，等待js加载完成并执行该脚本，然后继续解析文档。

	4)遇到script外部js，并且设置有async、defer，浏览器创建线程加载，并继续解析文档，对于async属性的脚本，脚本加载完成后立即执行。（异步加载禁止使用document.write()）

	5)遇到img等，先正常解析dom结构，然后浏览器异步加载src，并继续解析文档。

	6)当文档解析完成，document.ready = 'interactive'.

	7)当文档解析完成后，所有设置有defer的脚本会按照顺序执行（注意与async的不同，但同样禁止使用document.write()）

	8)document对象触发DOMContentLoaded事件，这也标志着程序执行从同步执行阶段，转化为事件驱动阶段。
	document.addEventLlistener('DOMContentLoaded',function () {},false); ——>$(document).ready(function() {});

	9)当所有async的脚本加载完成并执行后，img等加载完成后，document.readyState = 'complete',window对象触发load事件。

	10)从此，以异步响应方式处理用户输入、网络事件等。

13.BOM
	1)定义：Browser Object Model，定义了操作浏览器的接口

	2)BOM对象：Window,History,Navigator,Screen,Location等，可以参考W3C标准

	3)由于浏览器厂商的不同，Bom对象的兼容性极低。一般情况下，我只用其中的部分功能。

	4)Location对象
		location.hash
			'#'后是对浏览器操作的，对服务器无效，实际发出的请求也不包含'#'后面的部分
			'#'被算作历史纪录

14.正则表达式(RegExp)
 	1)转义字符'\'
 	  多行字符串
 	  字符串换行符\n

 	2)正则表达式的作用：匹配特殊字符或有特殊搭配原则的字符的最佳选择

 	3)两种创建方式
 		直接量(推荐直接量) ——> //
 		new RegExp(); ——> new RegExp('','');

 	4)修饰符
 	  i:不区分大小写匹配
 	  g:全局匹配
 	  m:多行匹配 eg: var reg = /^a/gm;var str = 'abcede\na';str.match(reg);//['a','a']

 	5)表达式
 	  [0-9]:匹配数字
 	  [A-z]:匹配字母
 	  /^/:以...开头
 	  /$/:以...结尾
 	  [^a]:匹配非a
 	  (a|b):匹配a或b
 	  /[\s\S]/g:匹配一切字符

 	6)元字符
 	  . :匹配任意字符 [^\r\n]
 	  \w:[0-9A-z_]
 	  \W:[^\w]
 	  \d:[0-9]
 	  \D:[^\d]
 	  \s:[\t\n\r\v\f ]匹配空白字符
 	  \S:[^\s]
 	  \b:匹配单词边界 eg:var reg = /\bcde/g;var str = 'abccdefgh';str.match(reg);//['cde']
 	  \B:匹配非单词边界

 	7)量词
 	  +:匹配至少一个
 	  *:匹配至少零个
 	  ?:匹配至多一个
 	  {x}:匹配x个
 	  {x,y}:匹配x到y个
 	  {x,}:匹配x个到无穷个

 	8)RegExp对象属性
 	 	global:是否具有标志g
 	 	ignoreCase:是否具有标志i
 	 	lastIndex:一个整数，表示开始下一个匹配的字符位置,与exec()方法一起配合使用
 	 	multiline:是否具有标志m
 	 	source:正则表达式的源文本

 	9)RegExp对象方法
 	 	compile():编译正则表达式
 	 	exec():检索字符串中指定的值，返回找到的值，并确定其位置。 eg: var reg = /ab/g;
 	 				var str = 'abababab';
 	 				reg.exec(str);//["ab", index: 0, input: "abababab"]
 	 	test():检索字符串中指定的值，返回true或false

 	10)反向引用
 	 	var str = 'aabb';
 	 	var reg = /(\w)\1(\w)\2/g;
 	 	str.match(reg);//['aabb']

 	11)正向预查
 		var str = 'abaaaa';
 		var reg = /a(?=b)/g;
 		var reg1 = /a(?!b)/g;
 		str.match(reg);//['a']
 		str.match(reg1);//['a','a','a','a']

 	12)匹配原则
 		贪婪匹配：能多不少
 		var str = 'aaaa';
 		var reg = /a+/g;
 		str.match(reg);//['aaaa']

 		非贪婪匹配：能少不多
 		var str = 'aaaa';
 		var reg = /a+?/g;
 		var reg1 = /a{1,3}?/g;
 		str.match(reg);//["a", "a", "a", "a"]
 		str.match(reg1);//["a", "a", "a", "a"]


	练习：写一个正则表达式，检验一个字符串首尾是否含有数字
		  /^\d|\d$/
		  /^\d[\s\S]*\d$/首尾都有数字

		  var reg = /(\w)\1(\w)\2/g;
 	   	  var str = 'aabb';
 	   	  console.log(str.replace(reg,'$2$2$1$1'));//'bbaa'
 	   	  console.log(str.replace(reg,function ($,$1,$2) {
 	   	  	return $2 + $2 + $1 + $1;
 	   	  }));//bbaa

 	      var reg = /-(\w)/g;
 	      var str = 'the-first-name';
 	      console.log(str.replace(reg,function ($,$1) {
 	   		return $1.toUpperCase();
 	      }));

 	      var str = 'aaaaaabbbbbccccc';
 	      var reg = /(\w)\1*/g;
 	      str.replace(reg,'$1');//'abc'

 	      var str = '100000000000';
 	      var reg = /(?=(\B)(\d{3})+$)/g;
 	      str.replace(reg,'');//'100.000.000.000'

























