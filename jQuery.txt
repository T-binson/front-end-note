1.jQuery是javascript library.
	引入
	ready event:
	$(document).ready(function() {
		//code here.
	})
	简写:
	$(function() {
		//code here.
	})

	.addClass()和.removeClass()

	没有arguments的callback
	eg:$.get("htmlpage.html",callback);//callback只是一个函数名称，没有括号，不是字符串
	有arguments的callback
	eg:$.get("htmlpage.html",function() {
			callback(para1,para2);
		});

2.$和$()的区别
	Methods called on jQuery selections are in the $.fn namespace, and automatically receive and return the selection as this.

	Methods in the $ namespace are generally utility-type methods, and do not work with selections; they are not automatically passed any arguments, and their return value will vary.

3.$(document).ready()
	$(document).ready()和window.onload()/$(window).on("load",function(){})的区别:
	document.ready先于window.onload执行.

	function readyFn() {};
	$(document).ready(readyFn)/$(window).on("load",readyFn);

4.避免与其他js库冲突
	eg:
	First method:
		<!-- Putting jQuery into no-conflict mode. -->
		<script src="prototype.js"></script>
		<script src="jquery.js"></script>
		<script>
	 
		var $j = jQuery.noConflict();
		// $j is now an alias to the jQuery function; creating the new alias is optional.
	 
		$j(document).ready(function() {
	    	$j( "div" ).hide();
		});
	 
		// The $ variable now has the prototype meaning, which is a shortcut for
		// document.getElementById(). mainDiv below is a DOM element, not a jQuery object.
		window.onload = function() {
	    	var mainDiv = $( "main" );
		}
	 
		</script>

	Second method:
		<!-- Another way to put jQuery into no-conflict mode. -->
		<script src="prototype.js"></script>
		<script src="jquery.js"></script>
		<script>
	 
		jQuery.noConflict();
	 
		jQuery( document ).ready(function( $ ) {
	    	// You can use the locally-scoped $ in here as an alias to 	jQuery.
	    	$( "div" ).hide();
		});
		//OR: (function($) {
			//jQuery code here,use the $,只能用于jQuery库，不能使用其他库的方法
		})(jQuery);
	 
		// The $ variable in the global scope has the prototype.js meaning.
		window.onload = function(){
	    	var mainDiv = $( "main" );
		}
	 
		</script>

	加载jQuery在其他js库之前:
		<!-- Loading jQuery before other libraries. -->
		<script src="jquery.js"></script>
		<script src="prototype.js"></script>
		<script>
		 
		// Use full jQuery function name to reference jQuery.
		jQuery( document ).ready(function() {
		    jQuery( "div" ).hide();
		});
		 
		// Use the $ variable as defined in prototype.js
		window.onload = function() {
		    var mainDiv = $( "main" );
		};
		 
		</script>

5.attributes属性
	.attr()获取和设置属性
	
	.attr() as a getter:
	eg:$("a").attr("href")//Returns the href for the first a element in the document

	.attr() as a setter:
	设置属性时，括号里面的参数可以是一个字符串的键值对(属性和属性值)，也可以是一个包含多个键值对的对象
	eg: $("a").attr("href","allmyhref.html");
			$("a").attr({
				title: "your title",
				href: "yourhref.html"
			});

6.elements selectors选择器
	 jQuery supports most CSS3 selectors, as well as some non-standard selectors. For a complete selector reference, visit the Selectors documentation on api.jquery.com.

	 ID selector: $("#myId")
	 ClassName selector: $(".myClass")
	 Attribute selector: $("input[name='first_name']")
	 Compound CSS selector: $("#contents ul.people li")
	 A Comma-separated List of selectors: $("div.myclass,ul.people")
	 Pseudo-selector(伪类选择器): 
	 	$("a.external:first");
	 	$("tr:odd");

	 	// Select all input-like elements in a form (more on this below).
	 	$("#myform:input");
	 	$("div:visible");

	 	// All except the first three divs.
	 	$("div:gt(2)");

	 	// All currently animated divs.
	 	$("div:animated");

	 	Note: When using the :visible and :hidden pseudo-selectors, jQuery tests the actual visibility of the element, not its CSS visibility or display properties. jQuery looks to see if the element's physical height and width on the page are both greater than zero.

		However, this test doesn't work with <tr> elements. In the case of <tr> jQuery does check the CSS display property, and considers an element hidden if its display property is set to none.

		Elements that have not been added to the DOM will always be considered hidden, even if the CSS that would affect them would render them visible.

		判断选择器是否含有元素应该使用选中元素的length属性:if($("div").length){}

		jQuery doesn't cache elements，so: var divs = $("div");

		Refining & Filtering Selections
		eg: // Refining selections.
			$( "div.foo" ).has( "p" );         // div.foo elements that contain <p> tags
			$( "h1" ).not( ".bar" );           // h1 elements that don't have a class of bar
			$( "ul li" ).filter( ".current" ); // unordered list items with class of current
			$( "ul li" ).first();              // just the first unordered list item
			$( "ul li" ).eq( 5 );              // the sixth

		选择表单元素
			:checked: $("form:checked");//The :checked pseudo-selector works when used with checkboxes, radio buttons and selects

			:disabled: $("form:disabled");//最好使用$("form input").filter(":disabled")这种方法
			:enabled: $("form:enabled");//同上

			:input: $("form:input")//Using the :input selector selects all <input>, <textarea>, <select>, and <button> elements

			:selected: $("form:selected");//Using the :selected pseudo-selector targets any selected items in <option> elements,同上

			通过类型选择：
				:password
				:reset
				:radio
				:text
				:submit
				:checkbox
				:button
				:image
				:file

7.working with selectors
	Setter&Getter:
	Setters return a jQuery object, allowing you to continue calling jQuery methods on your selection. Getters return whatever they were asked to get, so you can't continue to call jQuery methods on the value returned by the getter.

	chaining链式操作
		eg:
		$( "#content" ).find( "h3" ).eq( 2 ).html( "new text for the third h3!" );
		OR:$("#content")
				.find("h3")
				.eq(2)
				.html("new text for the third h3");

		$( "#content" )
		    .find( "h3" )
		    .eq( 2 )
		        .html( "new text for the third h3!" )
		        .end() // Restores the selection to all h3s in #content
		    .eq( 0 )
		        .html( "new text for the first h3!" );

8.manipulating elements操作元素
	1)获取和设置元素的内容
		.html()-Get or set the HTML contects

		.text()-Get or set the text contents;HTML will be stripped

		.attr()-Get or set the value of the provided attributes

		.width()-Get or set the width in pixels of the first element in the selection as an integer

		.height()-Get or set the height in pixels of the first element in the selection as an integer

		.position()-Get an object with postion information for the first element in the selection,relative to its first positioned ancestor.*This is a getter only

		.val()-Get or set the value of form elements

	2)移动、复制、删除元素
		Moving:
		Place the selected element(s) relative to another element.
			.insertAfter() .insertBefore() .appendTo() .prependTo()

		Place an element relative to the selected element(s).
			.after() .before() .append() .prepend()
		
		eg:
		// Moving elements using different approaches.
 
		// Make the first list item the last list item:
		var li = $( "#myList li:first" ).appendTo( "#myList" );
		 
		// Another approach to the same problem:
		$( "#myList" ).append( $( "#myList li:first" ) );
		 
		// Note that there's no way to access the list item
		// that we moved, as this returns the list itself.

		Copy:
			.clone()
		eg:
		// Making a copy of an element.
 
		// Copy the first list item to the end of the list:
		$( "#myList li:first" ).clone().appendTo( "#myList" );

		Removing:
			.remove() 永久移除元素本身，返回值不带有数据和事件
			.detach() 永久移除元素本身，返回值带有数据和事件
			.empty() 只是移除元素里的内容，保留选中的元素

	3)创造新元素
		// Creating new elements from an HTML string.
		$( "<p>This is a new paragraph</p>" );
		$( '<li class=\"new\">new list item</li>' );

		// Creating a new element with an attribute object.
		$( "<a/>", {
    		html: "This is a <strong>new</strong> link",
    		"class": "new",
    		href: "foo.html"
		});
		Note that the attributes object in the second argument above, the property name class is quoted, although the property names html and href are not. Property names generally do not need to be quoted unless they are reserved words (as class is in this case).

	4)操作属性.attr()
		// Manipulating a single attribute.
		$( "#myDiv a:first" ).attr( "href", "newDestination.html" );

		// Manipulating multiple attributes.
		$( "#myDiv a:first" ).attr({
    		href: "newDestination.html",
    		rel: "nofollow"
		});

		// Using a function to determine an attribute's new value.
		$( "#myDiv a:first" ).attr({
	    	rel: "nofollow",
	    	href: function( idx, href ) {
	        	return "/new/" + href;
	    	}
		});
 
		$( "#myDiv a:first" ).attr( "href", function( idx, href ) {
    		return "/new/" + href;
		});

9.jQuery Object
	优点：
	兼容性
	便利性

	与DO(document object)的区别：两者的方法不能混用

	// Creating two jQuery objects for the same element.
	var logo1 = $( "#logo" );
	var logo2 = $( "#logo" );
	// Comparing jQuery objects.
 	alert( $( "#logo" ) === $( "#logo" ) ); // alerts "false"

 	// Comparing DOM elements.
 
	var logo1 = $( "#logo" );
	var logo1Elem = logo1.get( 0 );
	 
	var logo2 = $( "#logo" );
	var logo2Elem = logo2.get( 0 );
	 
	alert( logo1Elem === logo2Elem ); // alerts "true"

	jQuery object不是实时性的

10.Traversing
	<div class="grandparent">
    <div class="parent">
        <div class="child">
            <span class="subchild"></span>
        </div>
    </div>
    <div class="surrogateParent1"></div>
    <div class="surrogateParent2"></div>
	</div>
	1)parents
		.parent() 
		$("span.subchild").parent();//returns [div.child]

		.parents() 
		$("span.subchild").parents();//returns [div.child,div.parent,div.grandparent]
		$("span.subchild").parents("dib.parent");//returns [div.parent]

		.parentsUntil() 
		$("span.subchild").parentsUntil("div.grandparent");//returns [div.child,div.parent]

		.closest()
		$("span.subchild").closest("div");//returns [div.child]
		$("div.child").closest("div");//returns [div.child]

	2)children
		.children() 
		$("div.grandparent").children("div")//returns [ div.parent, div.surrogateParent1, div.surrogateParent2]选中直接子元素 
		.find() 
		$("div.grandparent").find("div");//returns [ div.child, div.parent, div.surrogateParent1, div.surrogateParent2 ]选中所有子元素，包括直接和间接的子元素

	3)siblings
		.prev()
		$( "div.parent" ).prev();// returns [] as No sibling exists before div.parent
		.prevAll()
		$( "div.surrogateParent2" ).prevAll();// returns [ div.surrogateParent1, div.parent ]
		.prevUntil()

		.next()
		$( "div.parent" ).next();// returns [ div.surrogateParent1 ]
		.nextAll()
		$( "div.parent" ).nextAll();// returns [ div.surrogateParent1, div.surrogateParent2 ]
		.nextUntil()

		.siblings()
		$( "div.parent" ).siblings();// returns [ div.surrogateParent1, div.surrogateParent2 ]

11.CSS,styling,dimensions
	获取和设置css属性
		$("h1").css("fontSize");//返回一个字符串，如19px
		Or：$("h1").css("font-size");//同上
		$("h1").css("fontSize","32px");//setting h1 font-size property
		$("h1").css({
			fontSize: "32px",
			color: "#f00"
		});setting multiple properties,属性名必须使用小驼峰式

	通常不使用以上的方式来设置样式，而是通过修改class来设置
		eg: var h1 = $("h1");
		h1.addClass("big");
		h1.removeClass("big");
		h1.toggle("big");
		if(h1.hasClass("big")){}

	获取和设置dimension
		.width()/.height()
		$("h1").width();//gets the width of the first h1
		$("h1").width("50px");//sets the width of all h1

		.postion
		$("h1").position();// Returns an object containing position information for the first <h1> relative to its "offset (positioned) parent".

12.Data methods
	.data()
	$("#mydiv").data("keyname",{foo: "bar"});//stores data related to an element.
	$("#mydiv").data("keyname");//retrieves data related to an element,returns {foo: "bar"}

	// Storing a relationship between elements using .data()
	$("mylist li").each(function() {
		var li = $(this);
		var div = li.find("div.content");
		li.data("contentDiv",div);
	});
	// Later, we don't have to find the div again;
	// we can just read it from the list item's data
	var firstLi = $( "#myList li:first" );
 	firstLi.data( "contentDiv" ).html( "new content" );

13.Utility methods
	$.trim()
	$.trim("    lots of extra whitespace    ");//"lots of extra whitespace"

	$.each()-遍历数组,对象,类数组对象(与.each()的区别)
	$.each(["foo","bar","baa"],function(idx,val) {
		console.log("element " + idx + " is " + val);
	});//element 0 is foo 
		 	 element 1 is bar 
		 	 element 2 is baa
	$.each({foo: "bar", baz: "bim"},function( k, v ) {
    	console.log( k + " : " + v );
	});//foo : bar 
		   baz : bim

	$.inArray()-Returns a value's index in an array, or -1 if the value is not in the array,返回数组的索引值，否则返回-1
		var arr = [1,3,5,7,9];
		if($.inArray(4,arr) !== -1) {
			console.log("found it");
		}

	$.extend()
	var firstObject = { foo: "bar", a: "b" };
	var secondObject = { foo: "baz" };
 	var newObject = $.extend( firstObject, secondObject );
 	console.log( firstObject.foo ); // "baz"
	console.log( newObject.foo ); // "baz"

	var firstObject = { foo: "bar", a: "b" };
	var secondObject = { foo: "baz" };
 	var newObject = $.extend( {}, firstObject, secondObject );
 	console.log( firstObject.foo ); // "bar"
	console.log( newObject.foo ); // "baz"

	$.proxy()
	var myFunction = function() {
    	console.log( this );
	};
	var myObject = {
	    foo: "bar"
	};
	myFunction(); // window,this指向window
	var myProxyFunction = $.proxy( myFunction, myObject );
	myProxyFunction(); // myObject,this指向myObject

	var myObject = {
    	myFn: function() {
        	console.log( this );
    	}
	};
 	$( "#foo" ).click( myObject.myFn ); // HTMLElement #foo
	$( "#foo" ).click( $.proxy( myObject, "myFn" ) ); // myObject

	$.type()
	$.isArray([]); // true
	$.isFunction(function() {}); // true
	$.isNumeric(3.14); // true

	$.type( true ); // "boolean"
	$.type( 3 ); // "number"
	$.type( "test" ); // "string"
	$.type( function() {} ); // "function"
	 
	$.type( new Boolean() ); // "boolean"
	$.type( new Number(3) ); // "number"
	$.type( new String('test') ); // "string"
	$.type( new Function() ); // "function"
	 
	$.type( [] ); // "array"
	$.type( null ); // "null"
	$.type( /test/ ); // "regexp"
	$.type( new Date() ); // "date"

14.Iterating over jQuery and non-jQuery Object
	$.each()-只能遍历数组，对象，类数组对象
	eg1:
	var sum = 0;
 	var arr = [ 1, 2, 3, 4, 5 ];
 	for ( var i = 0, l = arr.length; i < l; i++ ) {
    	sum += arr[ i ];
	}
 	console.log( sum ); // 15
 	$.each( arr, function( index, value ){
    	sum += value;
	});
 	console.log( sum ); // 15

 	eg2:
 	var sum = 0;
	var obj = {
	    foo: 1,
	    bar: 2
	}
	for (var item in obj) {
	    sum += obj[ item ];
	}
	console.log( sum ); // 3
	$.each( obj, function( key, value ) {
	    sum += value;
	});
	console.log( sum ); // 3

	// Incorrect错误例子:
	$.each( $( "p" ), function() {
	    // Do something
	});

	.each()-遍历元素集合
	eg:
	<ul>
	    <li><a href="#">Link 1</a></li>
	    <li><a href="#">Link 2</a></li>
	    <li><a href="#">Link 3</a></li>
	</ul>

	$( "li" ).each( function( index, element ){
	    console.log( $( this ).text() );
	});
	// Logs the following:
	// Link 1
	// Link 2
	// Link 3
	这里第二个参数element可以省略，但是为了代码的易读性，通常不省略。
	$( "li" ).each( function( index, listItem ) {
	    this === listItem; // true
	    // For example only. You probably shouldn't call $.ajax() in a loop.
	    $.ajax({
	        success: function( data ) {
	            // The context has changed.
	            // The "this" keyword no longer refers to listItem.
	            this !== listItem; // true
	        }
	    }); 
	});
	有时.each()方法不是必要的，因为有些方法自带遍历功能，例如以下情况
		$( "li" ).each( function( index, el ) {
		    $( el ).addClass( "newClass" );
		});
		可以直接写成这样：$( "li" ).addClass( "newClass" );
	但是有一些方法本身没有遍历功能，此时则需要.each()方法，例如
	// Doesn't work:
	$( "input" ).val( $( this ).val() + "%" ); 
	// .val() does not change the execution context, so this === window
	要改成这样：
	$( "input" ).each( function( i, el ) {
	    var elem = $( el );
	    elem.val( elem.val() + "%" );
	});
	以下是一些需要用到.each()方法的：
		.attr() (getter)
		.css() (getter)
		.data() (getter)
		.height() (getter)
		.html() (getter)
		.innerHeight()
		.innerWidth()
		.offset() (getter)
		.outerHeight()
		.outerWidth()
		.position()
		.prop() (getter)
		.scrollLeft() (getter)
		.scrollTop() (getter)
		.val() (getter)
		.width() (getter)
		Note that in most cases, the "getter" signature returns the result from the first element in a jQuery collection while the setter acts over the entire collection of 
		matched elements. The exception to this is .text() where the getter signature will return a concatenated string of text from all matched elements.

		另外以下两个操作是等价的
			$( "input" ).each( function( i, el ) {
			    var elem = $( el );
			    elem.val( elem.val() + "%" );
			});
			 
			$( "input" ).val(function( index, value ) {
			    return value + "%";
			});
		还有一些内置的方法比较繁琐,例如.children(),.parent()

		.map()-普遍使用的遍历方法
		var newArr = [];
		$( "li" ).each( function() {
		    newArr.push( this.id );
		});
		改写成：
		$( "li" ).map( function(index, element) {
		    return this.id;
		}).get();

		$.map()-与.map()的区别类似于$.each()和.each()
		The difference is also very similar to both .each() methods. $.map() works on plain JavaScript Arrays while .map() works on jQuery Element Collections. Because it's working on a plain array, $.map() returns a plain array and .get() does not need to be called – in fact, it will throw an error as it's not a native JavaScript method.

		提醒：$.map() switches the order of callback arguments. This was done in order to match the native JavaScript .map() method made available in ECMAScript 5.
		eg:
			<li id="a"></li>
			<li id="b"></li>
			<li id="c"></li>
			 
			<script> 
			var arr = [{
			    id: "a",
			    tagName: "li"
			}, {
			    id: "b",
			    tagName: "li"
			}, {
			    id: "c",
			    tagName: "li"
			}];
			 
			// Returns [ "a", "b", "c" ]
			$( "li" ).map( function( index, element ) {
			    return element.id;
			}).get();
			 
			// Also returns [ "a", "b", "c" ]
			// Note that the value comes first with $.map，注意参数顺序
			$.map( arr, function( value, index ) {
			    return value.id;
			});
			</script>

15.Using jQuery’s .index() Function
	.index() is a method on jQuery objects that's generally used to search for a GIVEN element within the jQuery object that it's called on. This method has FOUR different signatures with different semantics that can be confusing. 

	.index() with no arguments
		<ul>
		    <div></div>
		    <li id="foo1">foo</li>
		    <li id="bar1">bar</li>
		    <li id="baz1">baz</li>
		    <div></div>
		</ul>

		var foo = $( "#foo1" );
		console.log( "Index: " + foo.index() ); // 1,返回它在父元素中的索引
		var listItem = $( "li" );
		// This implicitly calls .first()
		console.log( "Index: " + listItem.index() ); // 1
		console.log( "Index: " + listItem.first().index() ); // 1
		 
		var div = $( "div" );
		// This implicitly calls .first()
		console.log( "Index: " + div.index() ); // 0
		console.log( "Index: " + div.first().index() ); // 0

		提示：Before jQuery 1.9, .index() only worked reliably on a single element, which is why we've used .first() on each of our examples. In jQuery 1.9+ this can be ignored, as the API was updated to define that it operates on the first element only.

	.index() with a string argument
		<ul>
		    <div class="test"></div>
		    <li id="foo1">foo</li>
		    <li id="bar1" class="test">bar</li>
		    <li id="baz1">baz</li>
		    <div class="test"></div>
		</ul>
		<div id="last"></div>

		var foo = $( "li" );
		// This implicitly calls .first()
		console.log( "Index: " + foo.index("li") ); // 0
		console.log( "Index: " + foo.first().index("li") ); // 0
		
		var baz = $( "#baz1" );
		console.log( "Index: " + baz.index( "li" )); // 2，在文档的所有li中索引值为2
		 
		var listItem = $( "#bar1" );
		console.log( "Index: " + listItem.index( ".test" ) ); // 1，在文档的所有class为test元素中索引值为1
		var div = $( "#last" );
		console.log( "Index: " + div.index("div") ); // 2,在文档的所有div中索引值为2

	.index() with a jQuery Object Argument
		<ul>
		    <div class="test"></div>
		    <li id="foo1">foo</li>
		    <li id="bar1" class="test">bar</li>
		    <li id="baz1">baz</li>
		    <div class="test"></div>
		</ul>
		<div id="last"></div>

		var foo = $( "li" );
		var baz = $( "#baz1" );
		 
		console.log( "Index: " + foo.index( baz ) ); // 2,在所有li集合中id为baz1的li的索引值为2
		 
		var tests = $( ".test" );
		var bar = $( "#bar1" );
		 
		// Implicitly calls .first() on the argument.
		console.log( "Index: " + tests.index( bar ) ); // 1,在所有class为test的元素中id为bar1的元素的索引值为1
		 
		console.log( "Index: " + tests.index( bar.first() ) ); // 1	

	.index() with a DOM Element Argument

16.补充知识点
	1)通过一个dom元素获取其他元素
	  eg: 
	  var mydom = document.getElementById("foo");
	  $(mydom).find("a");//获取mydom下所有的a标签
	
	2)判断一个元素是否含有某个class属性
	  eg:
	  .hasClass():
	  $( "div" ).click(function() {
	  if ( $( this ).hasClass( "protected" ) ) {
	    $( this )
	        .animate({ left: -10 })
	        .animate({ left: 10 })
	        .animate({ left: -10 })
	        .animate({ left: 10 })
	        .animate({ left: 0 });
	    }
	  });
	  
	  .is()
	  if($("#mydiv").is(".pretty.awesome")) {
	  	$("#mydiv").show();
	  }

	3)判断一个元素是否存在,可以使用length属性或者.show()方法

	4)用.prop()方法表单修改元素的状态

	5)获取选中项的文本值
	  eg:
	  <select id="myselect">
	    <option value="1">Mr</option>
	    <option value="2">Mrs</option>
	    <option value="3">Ms</option>
	    <option value="4">Dr</option>
	    <option value="5">Prof</option>
	  </select>
	  
	  $( "#myselect" ).val();//1
	  $( "#myselect option:selected" ).text();//"Mr"

17.Events事件
	启动事件
	// Event setup using a convenience method
	$( "p" ).click(function() {
	    console.log( "You clicked a paragraph!" );
	});
	Or:
	// Equivalent event setup using the `.on()` method
	$( "p" ).on( "click", function() {
	    console.log( "click" );
	});

	事件对象的属性和方法：
	pageX,pageY-事件发生时鼠标相对于页面左上角的位置

	type-事件类型

	which-The button or key that was pressed.

	data-绑定事件时传入的数据

	target-The DOM element that initiated the event.

	namespace-The namespace specified when the event was triggered.

	timeStamp-事件触发时距离19701月1日的毫秒数

	preventDefault()-阻止事件的默认行为(Prevent the default action of the event (e.g. following a link).)

	stopPropagation()-停止事件冒泡(Stop the event from bubbling up to other elements.)

	多个事件绑定一个处理程序，事件用空格间隔
	// Multiple events, same handler
	$( "input" ).on(
	    "click change", // Bind handlers for multiple events
	    function() {
	        console.log( "An input was clicked or changed!" );
	    }
	);

	多个事件绑定多个处理程序时，传递一个对象
	// Binding multiple events with different handlers
	$( "p" ).on({
	    "click": function() { console.log( "clicked!" ); },
	    "mouseover": function() { console.log( "hovered!" ); }
	});

	命名空间事件
		// Namespacing events
		$( "p" ).on( "click.myNamespace", function() { /* ... */ } );
		$( "p" ).off( "click.myNamespace" );
		$( "p" ).off( ".myNamespace" ); // Unbind all events in the namespace

	销毁事件监听(Tearing Down Event Listeners)
		// Tearing down all click handlers on a selection
		$( "p" ).off( "click" );

		// Tearing down a particular click handler, using a reference to the function
		var foo = function() { console.log( "foo" ); };
		var bar = function() { console.log( "bar" ); };
		 
		$( "p" ).on( "click", foo ).on( "click", bar );
		$( "p" ).off( "click", bar ); // foo is still bound to the click event

	只执行一次事件，.one()
		// Switching handlers using the `.one()` method
		$( "p" ).one( "click", firstClick );
		 
		function firstClick() {
		    console.log( "You just clicked this for the first time!" );
		 
		    // Now set up the new handler for subsequent clicks;
		    // omit this step if no further click responses are needed
		    $( this ).click( function() { console.log( "You have clicked this before!" ); } );
		}
		Note that in the code snippet above, the firstClick function will be executed for the first click on each paragraph element rather than the function being removed from all paragraphs when any paragraph is clicked for the first time.

		// Using .one() to bind several events
		$( "input[id]" ).one( "focus mouseover keydown", firstEvent);
		function firstEvent( eventObject ) {
		    console.log( "A " + eventObject.type + " event occurred for the first time on the input with id " + this.id );
		}

	触发事件处理程序
		.trigger() .triggerHandler()
		There are four differences between .trigger() and .triggerHandler()

		.triggerHandler() only triggers the event on the first element of a jQuery object.
		.triggerHandler() cannot be chained. It returns the value that is returned by the last handler, not a jQuery object.
		.triggerHandler() will not cause the default behavior of the event (such as a form submission).
		Events triggered by .triggerHandler(), will not bubble up the DOM hierarchy. Only the handlers on the single element will fire.

	自定义事件
	在自定义事件上，有两个很重要的方法：
		.on() and .trigger()

		.on() method takes an event type and an event handling function as arguments. Optionally, it can also receive event-related data as its second argument, pushing the event handling function to the third argument. Any data that is passed will be available to the event handling function in the data property of the event object. The event handling function always receives the event object as its first argument.

		.trigger() method takes an event type as its argument. Optionally, it can also take an array of values. These values will be passed to the event handling function as arguments after the event object.

		eg:
		//创建自定义事件
		$( document ).on( "myCustomEvent", {
		    foo: "bar"
		}, function( event, arg1, arg2 ) {
		    console.log( event.data.foo ); // "bar"
		    console.log( arg1 );           // "bim"
		    console.log( arg2 );           // "baz"
		});
		//触发自定义事件
		$( document ).trigger( "myCustomEvent", [ "bim", "baz" ] );

18.effects(内置的动画)
	.show(可选参数)-显示内容

	.hide(可选参数)-隐藏内容，表示将display属性设置为none

	.slideUp(可选参数可选参数)-隐藏内容,改变元素的height属性

	.slideDown(可选参数)-显示内,容改变元素的height属性

	.fadeOut(可选参数)-隐藏内容,改变元素的opacity属性

	.fadeIn(可选参数)-显示内容,改变元素的opacity属性
		// Run a callback even if there were no elements to animate
		var someElement = $( "#nonexistent" );
		 
		var cb = function() {
		    console.log( "done!" );
		};
		 
		if ( someElement.length ) {
		    someElement.fadeIn( 300, cb );
		} else {
		    cb();
		}

	.toggle(可选参数)-根据当前元素的visibility状态改变它的显示(display)方式

	.slideToggle(可选参数)-

	.fadeToggle(可选参数,callback回调函数)-
		// Fade in all hidden paragraphs; then add a style class to them (correct with animation callback)
		$( "p.hidden" ).fadeIn( 750, function() {
		    // this = DOM element which has just finished being animated
		    $( this ).addClass( "lookAtMe" );
		});

	.stop()-停止动画
		// Create a button to stop all animations on the page:
		$( "<button type='button'></button>" )
		    .text( "Stop All Animations" )
		    .on( "click", function() {
		        $( "body *" ).filter( ":animated" ).stop();
		    })
		    .appendTo( document.body );

	.delay(延迟时间)-延迟执行

	.jQuery.fx-The jQuery.fx object has a number of properties that control how effects are implemented
		eg:
			jQuery.fx.speeds默认值：
				{
					slow: 600,
					fast: 200,
					_default: 400
				}
			可以修改其中某一个属性的值：
				jQuery.fx.speeds.fast=300;

			jQuery.fx.interval()-控制动画每秒的帧数

			jQuery.fx.off = true-关闭动画，元素将立即被设置为目标最终状态。这在处理旧版浏览器时尤其有用，可作为提供禁用动画的选项

19.自定义动画custom effects with .animate()
	eg:
		// Custom effects with .animate()
		$( "div.funtimes" ).animate(
		    {
		        left: "+=50",
		        opacity: 0.25
		    },
		 
		    // Duration
		    300,
		 
		    // Callback to invoke when the animation is finished
		    function() {
		        console.log( "done!" );
		    }
		);
	颜色相关的属性不能使用自定义动画方法.animate(),要用颜色插件来定义
	动画过渡方式easing，只有两个swing,linear.更多的方式请使用插件
	eg:
		// Per-property easing
		$( "div.funtimes" ).animate({
		    left: [ "+=50", "swing" ],
		    opacity: [ 0.25, "linear" ]
		}, 300 );

20.动画队列和出列的解释
	队列是动画的基础
	队列充当回调函数
	eg:
		$( ".box" )
	    .animate( {
	        height: 20
	    }, "slow")
	    .queue( function() {
	        $( "#title" ).html( "We're in the animation, baby!" );//the queued function will execute right after the animation.
	 
	        // This tells jQuery to continue to the next item in the queue
	        $( this ).dequeue();
	    } );

	    出列的另一种方式：
	    	.queue( function( next ) {
			    console.log( "I fired!" );
			    next();
			} );
	自定义队列
		$( ".box" )
		    .queue( "steps", function( next ) {
		        console.log( "Step 1" );
		        next();
		    } )
		    .queue( "steps", function( next ) {
		        console.log( "Step 2" );
		        next();
		    } )
		    .dequeue( "steps" );

	清空队列
	方法一：调用.clearQueue()
		$( ".box" )
		    .queue( "steps", function( next ) {
		        console.log( "Will never log because we clear the queue" );
		        next();
		    } )
		    .clearQueue( "steps" )
		    .dequeue( "steps" );
		    控制台没有输出结果

	方法二：调用.stop(true)

	替换队列replace the queue
		eg:
			$( ".box" )
			    .queue( "steps", function( next ) {
			        console.log( "I will never fire as we totally replace the queue" );
			        next();
			    } )
			    .queue( "steps", [
			        function( next ) {
			            console.log( "I fired!" );
			            next();
			        }
			    ] )
			    .dequeue( "steps" );
			控制台输出结果：
				I fired! 
				I fired!
			Or：
			$( ".box" ).queue( "steps", function( next ) {
			    console.log( "I fired!" );
			    next();
			} );
			 
			console.log( $( ".box" ).queue( "steps" ) );
			 
			$( ".box" ).dequeue( "steps" );
			控制台输出结果：
				function ( next ) {
				    console.log( "I fired!" );
				    next();
				} 
				I fired! 
				I fired!

21.AJAX
	GET&POST区别
	Data Type数据类型
		text-传输简单的字符串
		html-传输放置在页面的html代码块
		script-添加新脚本到页面
		json-传输json格式的数据，包括字符串，数组，对象
		jsonp-跨域传输json格式数据
		xml-用于在自定义XML模式中传输数据。

	$.ajax(可选参数)
		常用的可选参数有：
		async:是否异步，默认是true
		cache:是否使用缓存的响应（如果可用）。除“script”和“jsonp”之外的所有数据类型默认为true。当设置为false时，URL将只附加一个缓存无效化参数
		done:如果请求成功，则运行回调函数。该函数接收响应数据（如果dataType为JSON，则转换为JavaScript对象）以及请求和原始请求对象的文本状态。
		fail:如果请求导致错误，则运行回调函数。该函数接收原始请求对象和请求的文本状态。
		always:一个回调函数在请求完成时运行，无论成功或失败。该函数接收原始请求对象和请求的文本状态
		context:callback回调函数的作用域，默认情况callback函数中的this指向原来传递给$.ajax（）的对象
		data:发送给服务器的数据，例如对象或者字符串
		dataType:希望服务器返回的数据类型，默认情况下，如果没有指定dataType，jQuery将会查看响应的MIME类型
		jsonp:在进行JSONP请求时在查询字符串中发送的回调名称，默认为“回调”
		timeout:考虑请求失败之前等待的时间（以毫秒为单位）。
		traditonal:
		type:请求类型(get/post)，默认为GET.其他请求类型，如put,delete,这些类型不一定所有浏览器支持
		url:请求地址，必选参数
	
	便利的方法
		$.get
		$.post
		$.getScript
		$.getJSON,使用这个方法时，按顺序传入以下参数
			url:必选的
			data(对$.getScript无效):可选的
			success callback:如果请求成功,则运行回调函数,可选的.该函数接收到响应数据（如果数据类型为JSON,则转换为JavaScript对象）以及请求和原始请求对象的文本状态.
			data type:可选的，注意：此选项仅适用于尚未在其名称中指定数据类型的方法。
		$.fn.load
			eg:
			// Using .load() to populate an element
			$( "#newContent" ).load( "/foo.html" );

			// Using .load() to populate an element based on a selector
			$( "#newContent" ).load( "/foo.html #myDiv h1:first", function( html ) {
			    alert( "Content updated!" );
			});
	Ajax在表单中的作用
		Serialization序列化(只序列化表单中带有name属性的元素)
			.serialize()
			eg:
				// Turning form data into a query string
				$( "#myForm" ).serialize();
				 
				// Creates a query string like this:
				// field_1=something&field2=somethingElse
			
			.serializeArray()
			eg:
				// Creating an array of objects containing form data
				$( "#myForm" ).serializeArray();
				 
				// Creates a structure like this:
				// [
				//   {
				//     name : "field_1",
				//     value : "something"
				//   },
				//   {
				//     name : "field_2",
				//     value : "somethingElse"
				//   }
				// ]
		
		Client-side validation客户端验证
			eg:
			// Validate a phone number field
			$( "#form" ).submit(function( event ) {
			    var inputtedPhoneNumber = $( "#phone" ).val();
			 
			    // Match only numbers
			    var phoneNumberRegex = /^\d*$/;
			 
			    // If the phone number doesn't match the regex
			    if ( !phoneNumberRegex.test( inputtedPhoneNumber ) ) {
			 
			        // Usually show some kind of error message here
			 
			        // Prevent the form from submitting
			        event.preventDefault();
			    } else {
			 
			        // Run $.ajax() here
			    }
			});

		Prefiltering预过滤
			eg:
			// Using a proxy with a prefilter
			$.ajaxPrefilter(function( options, originalOptions, jqXHR ) {
			    if ( options.crossDomain ) {
			        options.url = "http://mydomain.net/proxy/" + encodeURIComponent( options.url );
			        options.crossDomain = false;
			    }
			});

		JSONP的使用
			eg:
			// Using YQL and JSONP
			$.ajax({
			    url: "http://query.yahooapis.com/v1/public/yql",
			 
			    // The name of the callback parameter, as specified by the YQL service
			    jsonp: "callback",
			 
			    // Tell jQuery we're expecting JSONP
			    dataType: "jsonp",
			 
			    // Tell YQL what we want and that we want JSON
			    data: {
			        q: "select title,abstract,url from search.news where query=\'cat\'",
			        format: "json"
			    },
			 
			    // Work with the response
			    success: function( response ) {
			        console.log( response ); // server response
			    }
			});	

		Ajax Events
			eg:
			// Setting up a loading indicator using Ajax Events
			$( "#loading_indicator" )
			    .ajaxStart(function() {
			        $( this ).show();
			    })
			    .ajaxStop(function() {
			        $( this ).hide();
			    });




















































































































































































































































































